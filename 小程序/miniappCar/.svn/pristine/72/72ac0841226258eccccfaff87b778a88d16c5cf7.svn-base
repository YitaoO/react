import Taro, { Component } from "@tarojs/taro";
import { connect } from "@tarojs/redux";
import { View, Checkbox, Image } from "@tarojs/components";
import Dialog from "../../components/dialog";
import _ from "lodash";
import ArrowUpIcon from "../../images/choiceCar_up_icon.png";
import ArrowDownIcon from "../../images/choiceCar_down_icon.png";
import CheckALLIcon from "../../images/chiceCar_check_box_all_con.png";
import CheckNoIcon from "../../images/chiceCar_check_box_no_con.png";
import CheckOnIcon from "../../images/chiceCar_check_box_on_con.png";

import "./index.scss";
@connect(({ userInfo, carTree }) => ({
  userInfo,
  carTree
}))
class ChoiceCar extends Component {
  config = {
    navigationBarTitleText: "选择车辆"
  };
  constructor(props) {
    super(props);
    this.state = {
      choiceFatherId: [],
      choiceChildId: []
    };
  }
  componentDidMount() {
    const { listTreeCar } = this.props.carTree;
    if (listTreeCar.length == 0) {
      Dialog.showLoading();
      this.props.dispatch({
        type: "carTree/getCarTree",
        payload: {
          userId: this.props.userInfo.carUserInfo.UserID,
          type: 1
        }
      });
    }
  }
  // 点击父亲
  handlePathter = (item, { isArrow }) => {
    const { isMultiSelect, choiceFatherId, showList } = this.props.carTree;

    if (!isMultiSelect) {
      //单选
      this.renderMultiSelect(showList, "showList", item.projSubId);
    } else {
      if (!!isArrow) {
        this.renderMultiSelect(showList, "showList", item.projSubId);
      } else {
        this.renderMultiSelect(
          choiceFatherId,
          "choiceFatherId",
          item.projSubId
        );
      }
    }
  };
  renderMultiSelect = (parantList, name, projSubId) => {
    let project = [];
    //TODO:这里的逻辑带优化
    if (parantList.length == 0) {
      project.push(String(projSubId));
    } else {
      parantList.forEach(element => {
        if (element == String(projSubId)) {
          project = _.pull(Array.from(parantList), String(projSubId));
        } else {
          project = _.concat(Array.from(parantList), String(projSubId));
        }
      });
    }

    this.props.dispatch({
      type: "carTree/saveState",
      response: {
        [`${name}`]: project
      }
    });
  };
  // 点击儿子
  handleChildren = item => {
    const { isMultiSelect, choiceChildId } = this.props.carTree;
    if (!isMultiSelect) {
      this.props.dispatch({
        type: "carTree/saveState",
        response: {
          choiceCar: item
        }
      });
      Taro.navigateBack({
        delta: 1
      });
    } else {
      this.renderMultiSelect(choiceChildId, "choiceChildId", item.carId);
    }
  };
  render() {
    const {
      isMultiSelect,
      listTreeCar,
      choiceFatherId,
      choiceChildId,
      showList
    } = this.props.carTree;

    return (
      <View className="choiceCar-wrap">
        {listTreeCar.map(item => {
          return (
            <View className="item" key={item.kid}>
              <View key={childItem.projSubId} className="father-name">
                <View
                  className="arrow-wrap"
                  onClick={this.handlePathter.bind(this, item, {
                    isArrow: true
                  })}
                >
                  <Image
                    className="image-arrow"
                    src={
                      showList.includes(String(item.projSubId))
                        ? ArrowUpIcon
                        : ArrowDownIcon
                    }
                  />
                </View>
                <View
                  className="check-wrap"
                  onClick={this.handlePathter.bind(this, item)}
                  style={{ display: !!isMultiSelect ? "inline-block" : "none" }}
                >
                  <Image
                    className="check-icon"
                    src={
                      choiceFatherId.includes(String(item.projSubId))
                        ? CheckALLIcon
                        : CheckNoIcon
                    }
                  />
                  {/* <Checkbox
                    className="check-icon"
                    checked={
                      choiceFatherId.includes(String(item.projSubId))
                        ? true
                        : false
                    }
                    onClick={this.handlePathter.bind(this, item)}
                    Color="#58bdf2"
                  /> */}
                </View>

                <Text className="proj-name">{item.projSubName}</Text>
              </View>
              {item.children.map(childItem => {
                return (
                  <View
                    key={childItem.carId}
                    className="child-name"
                    style={{
                      display: showList.includes(String(childItem.projSubId))
                        ? "block"
                        : "none"
                    }}
                    onClick={this.handleChildren.bind(this, childItem)}
                  >
                    <View
                      className="check-wrap"
                      style={{
                        display: !!isMultiSelect ? "inline-block" : "none"
                      }}
                      // onClick={this.handleChildren.bind(this, childItem)}
                    >
                      <Image
                        className="check-icon"
                        src={
                          choiceChildId == childItem.carId ||
                          ((!!isMultiSelect &&
                            choiceFatherId.includes(
                              String(childItem.projSubId)
                            )) ||
                            choiceChildId.includes(String(childItem.carId)))
                            ? CheckALLIcon
                            : CheckNoIcon
                        }
                      />
                      {/* <Checkbox
                        className="check-icon"
                        Checked={
                          choiceChildId == childItem.carId ||
                          ((!!isMultiSelect &&
                            choiceFatherId.includes(
                              String(childItem.projSubId)
                            )) ||
                            choiceChildId.includes(
                              String(childItem.carId)
                            ))
                            ? true
                            : false
                        }
                        onClick={this.handleChildren.bind(this, childItem)}
                        Color="#58bdf2"
                      /> */}
                    </View>
                    <Text>{childItem.carNumber}</Text>
                    {"   "}
                    <Text>{childItem.carModelName}</Text>
                  </View>
                );
              })}
            </View>
          );
        })}
      </View>
    );
  }
}

export default ChoiceCar;
