"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _index = require("../npm/@tarojs/taro-weapp/index.js");

var _index2 = _interopRequireDefault(_index);

var _api = require("../services/api.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var carOn = "/images/index_car_on_icon.png";
var carOff = "/images/index_car_off_icon.png";

exports.default = {
  namespace: "car",
  state: {
    carStateList: [], //车辆最新状态
    listTreeCar: [] //车辆树
  },
  reducers: {
    saveCarState: function saveCarState(state, payload) {
      console.log(payload);
      return _extends({}, state, payload.response);
    }
  },
  effects: {
    // 车辆最新状态
    getCarLastState: /*#__PURE__*/regeneratorRuntime.mark(function getCarLastState(_ref, _ref2) {
      var payload = _ref.payload;
      var call = _ref2.call,
          put = _ref2.put;
      var response;
      return regeneratorRuntime.wrap(function getCarLastState$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return call(_api.reqCarStateList, payload);

            case 2:
              response = _context.sent;

              _index2.default.hideLoading();
              response.forEach(function (item) {
                item.id = item.simno;
                item.width = 61;
                item.height = 61;
                item.iconPath = !!item.acc ? carOn : carOff;
                // item.callout = {
                //   display: "none",
                //   content: `<view>${item.carModel}\n${item.carModel}</view>`,
                //   bgColor: "#ffffff",
                //   padding: 15
                // };
              });

              _context.next = 7;
              return put({
                type: "saveCarState",
                response: {
                  carStateList: response
                }
              });

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, getCarLastState, this);
    }),

    // 获取车辆树
    getCarTree: /*#__PURE__*/regeneratorRuntime.mark(function getCarTree(_ref3, _ref4) {
      var payload = _ref3.payload;
      var call = _ref4.call,
          put = _ref4.put;
      var response;
      return regeneratorRuntime.wrap(function getCarTree$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return call(_api.reqListTreeCar, payload);

            case 2:
              response = _context2.sent;

              _index2.default.hideLoading();
              _context2.next = 6;
              return put({
                type: "saveCarState",
                response: {
                  listTreeCar: response
                }
              });

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, getCarTree, this);
    })
  }
};